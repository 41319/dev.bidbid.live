{"version":3,"sources":["webpack:///./node_modules/grommet-icons/es6/icons/Cluster.js","webpack:///./src/pages/account/mystore.js","webpack:///./src/library/store.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","props","createElement","StyledIcon","viewBox","a11yTitle","fill","stroke","strokeWidth","d","configureCol","property","headerText","type","render","data","ReactHtmlParser","description","whatsapp","onClick","navigate","objectId","App","_userContext","React","useContext","UserContext","useState","datasource","setDatasource","useEffect","storeRoles","roleObjects","filter","ro","get","includes","map","id","getStoreByRole","then","ds","DataGrid","width","objectClass","columns","query","q","afterAction","refresh","limit","searchObject","ascending","role","c","f","v","t"],"mappings":"yKAAA,SAASA,IAeP,OAdAA,EAAWC,OAAOC,QAAU,SAAUC,GACpC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,IAGOS,MAAMC,KAAMR,WAKvB,IAAI,EAAU,SAAiBS,GACpC,OAAoB,IAAMC,cAAcC,EAAA,EAAYhB,EAAS,CAC3DiB,QAAS,YACTC,UAAW,WACVJ,GAAqB,IAAMC,cAAc,OAAQ,CAClDI,KAAM,OACNC,OAAQ,OACRC,YAAa,IACbC,EAAG,uK,gDCnBDC,EAAe,CACnB,CACEC,SAAU,OACVC,WAAY,QAEd,CACED,SAAU,cACVC,WAAY,OACZC,KAAM,WACNC,OAAQ,SAACC,GAAD,OAAU,wCAAIC,IAAgBD,EAAKE,aAAzB,OAEpB,CACEN,SAAU,WACVC,WAAY,WACZE,OAAQ,SAACC,GAAD,OAAU,wCAAIC,IAAgBD,EAAKG,UAAzB,OAEpB,CACEP,SAAU,WACVC,WAAY,UACZE,OAAQ,SAACC,GAAD,OACN,oCACE,kBAAC,EAAD,CACEI,QAAS,WACPC,YAAS,iCAAiCL,EAAKM,iBAsC5CC,UA9BH,WACV,IAAMC,EAAeC,IAAMC,WAAWC,KADtB,EAEoBC,mBAAS,IAAtCC,EAFS,KAEGC,EAFH,KAiBhB,OAbAC,qBAAU,WACR,IAAMC,EACHR,GACCA,EAAaS,YACVC,QAAO,SAACC,GAAD,OAAQA,EAAGC,IAAI,QAAQC,SAAS,aACvCC,KAAI,SAACH,GAAD,OAAQA,EAAGI,OACpB,GACEP,GAAcA,EAAWtC,QAC3B8C,YAAeR,EAAY,KAAKS,MAAK,SAACC,GACpCZ,EAAcY,QAGjB,CAAClB,IAEF,oCACE,kBAACmB,EAAA,EAAD,CACEC,MAAM,OACNC,YAAY,QACZC,QAASnC,EACToC,MAAO,SAACC,GAAD,OAAOA,GACdnB,WAAYA,EACZoB,YAAa,kBAAMzB,EAAa0B,gB,kCCjExC,4DAGaV,EAAiB,SAACR,EAAiBmB,GAC9C,YAD4D,IAA/BnB,MAAa,SAAkB,IAAdmB,MAAQ,GAC/CC,YAAa,QAAS,CAC3BC,UAAW,YACXC,KAAM,CACJC,EAAG,QACHC,EAAG,cACHC,EAAGzB,EACH0B,EAAG","file":"component---src-pages-account-mystore-js-8f2cd58d1277f0cee846.js","sourcesContent":["function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { StyledIcon } from '../StyledIcon';\nexport var Cluster = function Cluster(props) {\n  return /*#__PURE__*/React.createElement(StyledIcon, _extends({\n    viewBox: \"0 0 24 24\",\n    a11yTitle: \"Cluster\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#000\",\n    strokeWidth: \"2\",\n    d: \"M8,9 L16,9 L16,1 L8,1 L8,9 Z M1,23 L9,23 L9,15 L1,15 L1,23 Z M15,23 L23,23 L23,15 L15,15 L15,23 Z M5,15 L8,9 L5,15 Z M10,19 L14,19 L10,19 Z M16,9 L19,15 L16,9 Z\"\n  }));\n};","import React, { useState, useEffect } from \"react\";\nimport DataGrid from \"../../containers/DataGrid\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport { Cluster } from \"grommet-icons\";\nimport Parse from \"../../library/parse\";\nimport { getStoreByRole } from \"../../library/store\";\n\nimport UserContext from \"../../context/UserContext\";\nimport { navigate } from \"gatsby\";\nconst configureCol = [\n  {\n    property: \"name\",\n    headerText: \"Name\",\n  },\n  {\n    property: \"description\",\n    headerText: \"Info\",\n    type: \"Textarea\",\n    render: (data) => <> {ReactHtmlParser(data.description)} </>,\n  },\n  {\n    property: \"whatsapp\",\n    headerText: \"Whatsapp\",\n    render: (data) => <> {ReactHtmlParser(data.whatsapp)} </>,\n  },\n  {\n    property: \"objectId\",\n    headerText: \"Product\",\n    render: (data) => (\n      <>\n        <Cluster\n          onClick={() => {\n            navigate(`/account/store/manageproduct2/${data.objectId}`);\n          }}\n        />\n      </>\n    ),\n  },\n];\n\nconst App = () => {\n  const _userContext = React.useContext(UserContext);\n  const [datasource, setDatasource] = useState([]);\n\n  useEffect(() => {\n    const storeRoles =\n      (_userContext &&\n        _userContext.roleObjects\n          .filter((ro) => ro.get(\"name\").includes(\"Store-\"))\n          .map((ro) => ro.id)) ||\n      [];\n    if (storeRoles && storeRoles.length) {\n      getStoreByRole(storeRoles, 999).then((ds) => {\n        setDatasource(ds);\n      });\n    }\n  }, [_userContext]);\n  return (\n    <>\n      <DataGrid\n        width=\"100%\"\n        objectClass=\"Store\"\n        columns={configureCol}\n        query={(q) => q}\n        datasource={datasource}\n        afterAction={() => _userContext.refresh()}\n      />\n    </>\n  );\n};\nexport default App;\n","import React, { useEffect, useState } from \"react\";\nimport { searchObject } from \"./parse\";\n\nexport const getStoreByRole = (storeRoles = [], limit = 1) => {\n  return searchObject(\"Store\", {\n    ascending: \"createdAt\",\n    role: {\n      c: \"_Role\",\n      f: \"containedIn\",\n      v: storeRoles,\n      t: \"pointer\",\n    },\n  });\n};\n"],"sourceRoot":""}